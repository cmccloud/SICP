;; Exercise 4.11
(define (make-frame bindings) bindings)
(define (frame-variables frame) (map car frame))
(define (frame-values frame) (map cdr frame))
(define (make-binding var val) (cons var val))
(define (add-binding-to-frame! var val frame)
  (set-car! frame (cons (make-binding var val) frame)))
(define (extend-environment bindings base-env)
  (if (every (lambda (b) (= (length b) 2)) bindings)
      (cons (make-frame bindings) base-env)))
(define (traverse-env fn var env)
  (define (env-loop env)
    (define (scan bindings)
      (cond ((null? bindings)
             (env-loop (enclosing-environment env)))
            ((eq? (car (car bindings)) var)
             (fn bindings))
            (else (scan (cdr vars) (cdr vals)))))
    (if (eq? env the-empty-environment)
        (error "Unknown variable" var)
        (let ((frame (first-frame env)))
          (scan frame))))
  (env-loop env))

(define lookup-variable-value
  (partial traverse-env (lambda (bindings) (cdr (car bindings)))))

(define (set-variable-value! var val env)
  (traverse-env (lambda (bindings)
                  (set-cdr! (car bindings) val)) var env))

(define (define-variable! var val env)
  (let ((frame (first-frame env)))
    (define (scan bindings)
      (cond ((null? bindings)
             (add-binding-to-frame! var val frame))
            ((eq? var (car (car bindings)))
             (set-cdr! (car bindings) val))
            (else (scan (cdr bindings)))))
    (scan frame)))
